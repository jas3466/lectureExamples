HW 0 is due tonight at midnight
HW 1 will be posted this afternoon (will be logic puzzles)

**where to find examples from class
**weekly review quizzes

Tutoring for CIS 301 (and for CIS 300) available:
https://www.k-state.edu/aac/tutoring/appointment.html

/////////////////////////////////

The puzzles in this lecture are all either from or inspired by:
”What is the Name of This Book?”, by Raymond Smullyan

/////////////////////////////////
The first puzzles involve the island of Knights and Knaves.
Each inhabitant is either a knight or a knave.

Knights ALWAYS tell the truth, and knaves ALWAYS lie.

/////////////////////////////////

Who can say, "I'm a knave"?


/////////////////////////////////

You see two inhabitants, Ava and Bob.

Ava says that Bob is a knave.
Bob says, ”Neither Ava nor I are knaves.”

What are Ava and Bob?

Suppose Ava is a knight. Then Bob is a knave. OK!

Suppose Ava is a knave. Then Bob is a knight.

Ava: knight
Bob: knave







/////////////////////////////////

You see two different inhabitants, Eve and Fred.

Eve says, ”I am a knave or Fred is a knight.”

What are Eve and Fred?

(what does the "or" mean?) -> NOT exclusive or

Suppose Eve is a knight. Then Fred is a knight. Yes!
Suppose Eve is a knave. Her statement doesn't work. No.

Eve: knight
Fred: knight



////////////////////////////////////

You meet three inhabitants: Sarah, Bill and Mae.

Sarah tells you that only a knave would say that Bill is a knave.
Bill claims that it's false that Mae is a knave.
Mae tells you, “Bill would tell you that I am a knave.”

What types are Sarah, Bill, and Mae?

Suppose Sarah is a knight. Bill is also a knight.
    Mae is a knight. Her statement doesn't work. No.

Suppose Sarah is a knave. Bill would be a knave.
    Mae would also be a knave. Yes!

All three are knaves.


////////////////////////////////////

Lion always lies on Mondays, Tuesdays, and Wednesdays.
Lion always tells the truth on other days.
Unicorn always lies on Thursdays, Fridays, and Saturdays,
    and always tells the truth on other days.

On Sunday, everyone tells the truth.

Lion says:  ”Yesterday was one of my lying days.”
Unicorn says:  ”Yesterday was one of my lying days, too.”

What day is it?

Not Sunday.
Monday. Lion's statement works. Unicorn's doesn't.
Tuesday. Lion's statement doesn't work, and neither does Unicorn's.
Wednesday. Neither statement works.
Thursday. Both statements work.
Friday/Saturday - don't work, exactly same as Tuesday/Wednesday.

Today is Thursday.





////////////////////////////////

Tweedledee and Tweedledum are identical.
You know that one of them lies Mon/Tues/Wed,
and that the other lies Thurs/Fri/Sat.
(They tell the truth on non-lying days.)

You don’t know which is which.

You see both of them together.
The first one says:  ”I’m Tweedledum.”
The second one says:  ”I’m Tweedledee.”

Which is which?  What day is it?

Must be Sunday. On any other day, one would lie and would tell the
truth and they would both give the same name.

They are who they say they are.


//////////////////////////////////
Another Tweedledee and Tweedledum.

First twin: Today is Monday or Wednesday
Second twin: Today is Monday or Sunday

What day of the week is it?

(Can it be Sunday?) No.

Monday. No - both would be true statements.
Tuesday/Thursday/Friday/Saturday - no, because not listed.
    One statement would need to be true.

Wednesday. And we also know first twin is telling truth.






//////////////////////////////////
You know that either Tweedledum or Tweedledee has lost a rattle.
You find it, and want to return it to the correct one.
You don’t know what day it is, but are sure that it isn’t Sunday
(so one must be lying and one must be telling the truth).

The first one says:  "Tweedledee owns the rattle.”

The second one says: ”I'm Tweedledee!”

Who gets the rattle?

Suppose first one is lying. Tweedledum owns the rattle.
    Second one must be Tweedledee. Then the first one gets the rattle.

Suppose first one is telling the truth. Tweedledee owns the rattle.
    Second one must be Tweedledum. Then the first one gets the rattle.



///////////////////////////////////////////
Based on Shakespeare's ”Merchant of Venice”.

There are three caskets – one gold, one silver, and one lead.
One of the caskets contains a portrait.
Each casket has a message on it, and you know that at most
    one of the messages is true.

Gold casket:  ”The portrait is in this casket.”
Silver casket:  ”The portrait is not in this casket.”
Lead casket:  ”The portrait is not in the gold casket.”

Where is the portrait?

Suppose portrait in gold casket. More than 1 statement would be true.

Suppose portrait in silver casket. Exactly 1 statement would be true.

Suppose portrait in lead casket. more than 1 statement would be true.

Portrait is in silver casket.





///////////////////////////////////

Start truth tables.

Basic operations: ^, V, !, ->

^ - and
V - or
! - not ~
-> - implies




p q | p ^ q
------------
T T |   T
T F |   F
F T |   F
F F |   F

p q | p V q
------------
T T |   T
T F |   T
F T |   T
F F |   F

p | !p
-------
T | F
F | T

"If I have a test, then I will study"

p: I have a test
q: I will study

p -> q

p q | p -> q
------------
T T |   T
T F |   F
F T |   T (vacuously true)
F F |   T (vacuously true)

From highest to lowest precedence:
    (), !, ^, V, ->

    p -> q V !r

    p -> q V T

    p -> T

    T -> T

p is T
q is F
r is F

overall statement would be true

Order of operations
    ! evaluates right to left
        !!p is equivalent to !(!p)
    ^ and V evaluate left to right
        p ^ q ^ r is equivalent to (p ^ q) ^ r
        p V q V r is equivalent to (p V q) V r
    -> evaluates right to left
        p -> q -> r is equivalent to p -> (q -> r)

4 - 2 - 1 ((4 - 2) - 1)

Truth tables for basic operations

-> (implies) in programming



How does the implies operator relate to programming?

//////////////////////////////////////////

Top-level operator

p -> q V !r ^ p
p -> (q V ((!r) ^ p))
    the -> here is the top-level operator

p ^ q V r ^ p
(p ^ q) V (r ^ p)
    the V here is the top-level operator

p ^ q ^ r ^ s
((p ^ q) ^ r) ^ s
    the last ^ is the top-level operator

p ^ q -> r V !p -> q
(p ^ q) -> ((r V (!p)) -> q)
    the first -> is the top-level operator

Truth tables in Logika

Contingent, contradictory, tautology

Tautology : p V !p
Contradictory: p ^ !p

Satisfiable - there is at least one truth assignment that makes
    the formula true

/////////////////////////////////////
Next:
more with truth tables
equivalent formulae
begin propositional logic