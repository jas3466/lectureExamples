HW 7 due Thursday, October 14

Exam 2 is Tuesday, October 19

We will review for the exam on Thursday
    - will be a similar format as Exam 1
    - can bring one 8.5"x11" sheet of handwritten notes

ACM programming contest: Saturday, October 23

Hack K-State: Friday-Sunday, November 5-7

5 points extra credit in Homework category for each event

(signup details in Discord)

/////////////////////////

(from last time)

A x (A y (P(x, y))) |- A y (A x (P(x, y)))

/////////////////////////

E x (E y (P(x, y)) |- E y (E x (P(x, y))

/////////////////////////

E y (A x P(x, y)) |- A x (E y P(x, y))

P(x, y): person x likes person y

E y (A x P(x, y)): there is a person (the SAME person)
                that everyone likes

A x (E y P(x, y)): for all people, there exists a person that they
                like (everyone has someone that they like)



Would we be able to prove the other direction? NO!

/////////////////////////

Equivalences in predicate logic:

example sentences in English

P(x): person x attends K-State
Q(x): person x attends KU


¬ (∃x P(x)) is equivalent to ∀x ¬ P(x)

¬ (∃x P(x)): There does not exist a person that attends K-State.
∀x ¬ P(x): All people do not attend K-State


¬ (∀x P(x)) is equivalent to ∃x ¬ P(x)
    ...will need to use pbc

    - on your own, try proving the other direction

¬ (∀x P(x)): not all people attend K-State
∃x ¬ P(x): there exists a person that does not attend K-State



A x (P(x) -> !Q(x)) is equivalent to !(E x P(x) ^ Q(x))

-> try proving on your own

A x (P(x) -> !Q(x)): All people who attend K-State don't attend KU.
!(E x P(x) ^ Q(x)): There is no person who attends K-State and KU.

////////////////////////////////

Soundness and completeness of predicate logic.


Soundness: everything we can prove is true.
    - propositional logic is sound
    - predicate logic is also sound


Completeness: everything that is true can be proved
    - propositional logic is complete
    - predicate logic is not complete

Integers, predicates are different arithmetic operations

addition. 2 + 3 = 5

maybe 0,1,2,3,4

       2 + 3 = 0


Godel's Incompleteness Theorem.

Any consistent formal system where integer arithmetic is
carried out is incomplete -- there will be statements that
can be neither proved nor disproved.

(depends on interpretations)



Decidability - whether a problem can be decided one way or another

Halting problem - given a program, does it ever halt?

///////////////////////////////

This is the end of our predicate logic unit.

After exam 2, we will start on programming logic.


Useful knowledge beforehand: mathematical induction


////////////////////////////////
Mathematical induction.

Tool for proving something involving natural numbers
    (starting at 0 or 1)

Base case: prove the statement is true for n = 1
    (or 0...whatever is first)

Inductive step: Assume the statement is true for n.
    Given that, prove the statement is true for n+1.

**we will do something similar when proving the correctness of loops*


/////////////////////////////////
Example:

sum(1...n) = n*(n+1)/2

Base case: n = 1.

sum(1..1) = 1.

1*(1+1)/2 = 1. They are equal!


Inductive step. Assume sum(1...n) = n*(n+1)/2.
    What do we need to show? That sum(1..n+1) = (n+1)*((n+1)+1)/2

    Proof:
    We know sum(1...n) = n*(n+1)/2. Adding n+1 to both sides:

    sum(1..n+1) = n*(n+1)/2 + n+1

    working just with the LHS (left-hand side), we can rewrite as:

    (n*(n+1) + 2*(n+1))/2 = (n+1)*(n+2)/2
                        = (n+1)*((n+1)+1)/2


(left off here - will do rest on Thursday)

/////////////////////////////////

***starting number could really be anything.**

/////////////////////////////////
Example: 3^n - 1 is divisible by 2.

--> what does it mean for a number to be divisible by 2?

/////////////////////////////////
Example: 1 + 3 + 5 + ... + (2n−1) = n^2

//////////////////////////////////
Example: A set of n elements has n(n − 1)/2 subsets with 2 elements.
         (Take n = 2 as the base case)

/////////////////////////////////
Example: 6^n − 1 is divisible by 5.
