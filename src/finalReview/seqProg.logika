import org.sireum.logika._

//SYMEXE mode

//add 1 to all negative values from pos on
def addToNeg(a: ZS, pos: Z): Unit = {
    l"""{
        requires
            pos >= 0 ^ pos < a.size
        modifies a
        ensures
            a.size == a_in.size
            //what elements change
            A x: (pos..<a.size) a_in(x) < 0 -> a(x) == a_in(x) + 1

            //what elements do not change
            A x: (0..<pos) a(x) == a_in(x)
            A x: (pos..<a.size) a_in(x) >= 0 -> a(x) == a_in(x)
    }"""
    var i: Z = pos

    while (i < a.size) {
        l"""{
            invariant
                a.size == a_in.size
                i >= pos ^ i <= a.size
                pos >= 0
                //what elements have changed
                A x: (pos..<i) a_in(x) < 0 -> a(x) == a_in(x) + 1

                //what elements have not changed
                A x: (0..<pos) a(x) == a_in(x)
                A x: (pos..<i) a_in(x) >= 0 -> a(x) == a_in(x)
                A x: (i..<a.size) a(x) == a_in(x)
            modifies i, a
        }"""

        if (a(i) < 0) {
            a(i) = a(i) + 1
        }

        i = i + 1
    }
}

/////// Test code ////////////
var test: ZS = ZS(-3, -4, 0, 1, -1, 5, 6, -7)

addToNeg(test, 3)

assert (test == ZS(-3, -4, 0, 1, 0, 5, 6, -6))