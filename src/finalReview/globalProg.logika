import org.sireum.logika._

//SYMEXE mode

var total: Z = 0
var cand1: Z = 0
var cand2: Z = 0

//global invariant
l"""{
    invariant
        total == cand1 + cand2
        cand1 >= 0
        cand2 >= 0
}"""

def castVotes(candNum: Z, numVotes: Z) : Unit = {
    l"""{
        requires candNum == 1 V candNum == 2
            numVotes >= 0
        modifies cand1, cand2, total
        ensures
            (candNum == 1) -> (cand1 == cand1_in + numVotes ^ total == total_in + numVotes)
            (candNum == 2) -> (cand2 == cand2_in + numVotes ^ total == total_in + numVotes)
    }"""

    //could list the global invariants as premises

    if (candNum == 1) {
        cand1 = cand1 + numVotes
    }

    if (candNum == 2) {
        cand2 = cand2 + numVotes
    }

    total = total + numVotes
    //if I am in manual mode, must explicitly show the
        //global invariants still hold here
    //could list the global invariants as premises
}

//////// Test code ///////////
assert(total == 0 & cand1 == 0 & cand2 == 0)
//could list the global invariants as premises
castVotes(1, 3)
//could list the global invariants as premises
assert(total == 3 & cand1 == 3 & cand2 == 0)

castVotes(2, 2)
assert(total == 5 & cand1 == 3 & cand2 == 2)

castVotes(1, 1)
assert(total == 6 & cand1 == 4 & cand2 == 2)