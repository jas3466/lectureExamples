import org.sireum.logika._

var num: Z = readInt("Enter a first number: ")
val x: Z = readInt("Enter a second number: ")
val origNum: Z = num

assume (num < 10 & x > 0)
l"""{
    1. num < 10 ^ x > 0             premise
    2. num < 10                     ^e1 1
    3. x > 0                        ^e2 1
    4. origNum == num               premise
}"""

num = num - 10
l"""{
    1. num == num_old - 10          premise
    2. origNum == num_old           premise
    3. x > 0                        premise
    4. num_old < 10                 premise
    5. origNum == num + 10          algebra 1 2
    6. num + 10 < 10                algebra 1 4
}"""

num = num - x
l"""{
    1. num == num_old - x           premise
    2. x > 0                        premise
    3. origNum == num_old + 10      premise
    4. num_old + 10 < 10            premise
    5. num_old < 0                  algebra 4
    6. num < 0                      algebra 1 5 2
    7. origNum == num + x + 10      algebra 1 3
    8. num == origNum - (x + 10)    algebra 7
    9. num < 0 ^ num == origNum - (x + 10)  ^i 6 8
}"""

//Add appropriate logic blocks
//When you finish, the assertion below should hold
assert(num < 0 & num == origNum - (x + 10))