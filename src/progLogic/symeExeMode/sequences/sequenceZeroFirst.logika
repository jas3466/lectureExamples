//symexe mode

import org.sireum.logika._

//"Unit" is like a void return type
def makeFirstZero(seq: ZS): Unit = {
    //how would we write the function contract?
    //what do we want to require of seq?
    //how can we describe how seq will change?
    l"""{
        requires seq.size > 0
        modifies seq
        ensures
            seq(0) == 0
            //and I didn't change anything else
            //for every other position, the resulting value equals the initial value
            //seq_in is the original sequence when the function was called
            A x: (1..<seq.size) seq(x) == seq_in(x)
            //size doesn't change
            seq.size == seq_in.size
    }"""

    seq(0) = 0

}

///// Test code ///////////

var nums: ZS = ZS(1,2,3)
makeFirstZero(nums)

//we want to claim that nums is what it was, but with the first
//element as a 0
assert(nums == ZS(0,2,3))