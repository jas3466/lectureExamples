import org.sireum.logika._

def addOne(list: ZS): Unit = {
    l"""{
        //function contract
        modifies list
        ensures
            A x: (0..<list.size) list(x) == list_in(x) + 1
            list.size == list_in.size
    }"""

    //how should we write the code?
    var i: Z = 0

    while (i < list.size) {
        l"""{
            invariant
                A x: (0..<i) list(x) == list_in(x) + 1
                A x: (i..<list.size) list(x) == list_in(x)
                list.size == list_in.size
                i >= 0
                i <= list.size
            modifies list, i
        }"""
        list(i) = list(i) + 1
        i = i + 1
    }

    //don't forget the loop invariant block
}

////////////// Calling code ///////////////////

var test: ZS = ZS(1,2,3,4)
addOne(test)

//what *should* test be now?
assert(test == ZS(2,3,4,5))