import org.sireum.logika._

//return the smallest element in list
def min(list: ZS): Z = {
    l"""{
        //function contract
        requires list.size > 0
        ensures
            //<= every value in the sequence
            A x: (0..<list.size) result <= list(x)

            //the thing I'm returning was in the sequence
            //there exists a value in the sequence that is my returned value
            E x: (0..<list.size) result == list(x)
    }"""



    //write the function
    var small: Z = list(0)
    var i: Z = 1 //compare to all the other elements

    while (i < list.size) {
        l"""{
            invariant
                i >= 1
                i <= list.size
                A x: (0..<i) small <= list(x)
                E x: (0..<i) small == list(x)
            modifies i, small
        }"""

        if (list(i) < small) {
            small = list(i)
        }

        i = i + 1
    }

    //don't forget the loop invariant block

    return small
}

////////////// Calling code ///////////////////

var test: ZS = ZS(8,1,0,10,9,2,0)
var testMin: Z = min(test)

//what should testMin be?
assert(testMin == 0)