import org.sireum.logika._

def swap(list: ZS, pos1: Z, pos2: Z): Unit = {
    l"""{
        //fill in the function contract
        requires pos1 < list.size
            pos1 >= 0
            pos2 < list.size
            pos2 >= 0
        modifies list
        ensures
            //the new value at pos1 is the old value at pos2
            list(pos1) == list_in(pos2)
            list(pos2) == list_in(pos1)
            //all other values haven't changed
            A x: (0..<list.size) (x != pos1 ^ x != pos2) -> list(x) == list_in(x)
            list.size == list_in.size
    }"""

    //How would we swap two positions?
    var temp: Z = list(pos1)
    list(pos1) = list(pos2)
    list(pos2) = temp
}

///////////// Calling code ///////////////////

var testList: ZS = ZS(1,2,3,4)
swap(testList,0,3)

//(4,2,3,1)

//What *should* testList be now?
assert(testList == ZS(4,2,3,1))