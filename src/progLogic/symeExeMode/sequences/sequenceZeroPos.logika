//symexe mode

import org.sireum.logika._

//"Unit" is like a void return type
def makePosZero(seq: ZS, pos: Z): Unit = {
    //how would we write the function contract?
    //what do we want to require of seq?
    //how can we describe how seq will change?
    l"""{
        requires seq.size > pos
            pos >= 0
        modifies seq
        ensures
            seq(pos) == 0
            //everything before pos doesn't change
            A x: (0..<pos) seq(x) == seq_in(x)
            //everything after pos doesn't change
            A x: (pos+1..<seq.size) seq(x) == seq_in(x)
            // or we could have replaced the above two A statements with one:
            //A x: (0..<seq.size) x != pos -> seq(x) == seq_in(x)
            seq.size == seq_in.size
    }"""

    seq(pos) = 0
}

///// Test code ///////////

var nums: ZS = ZS(1,2,3)
makePosZero(nums, 1)

//we want to claim that nums is what it was, but with position 1
//as a 0
assert(nums == ZS(1,0,3))