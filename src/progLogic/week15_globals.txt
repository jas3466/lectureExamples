HW 14 (last one) due Thursday, December 9

Final exam: Wednesday, December 15 2:00-3:50 pm in this room

We will review for the final on Thursday

////////////////////////////////////

Global variables and global invariants.

- Multiple functions might share the same global variables
- (true for fields/properties when writing general classes)

- Will add GLOBAL INVARIANTS specifying what must always be true
    about global variables


- If a function works with global variables:
    - It can list the global invariants as PREMISES
        at the beginning of the function
    - It must PROVE the global invariants still hold
        at the end of the function
    - It must list the global variable in the MODIFIES clause
        in the function contract
    - It must state how a global variable is modified as
        a postcondition


- After returning from a function call,
    we can list the global invariants as PREMISES

/////////////////////////////////////

Bank example.

Global variables:
    - account balance
    - "elite" status (a boolean for if the balance is >= 1 million)

Global invariants:
    - balance should be non-negative
    - elite status should match balance


--> What asserts can we make about the global invariants?


////////////////////////////////////

Hall passes example


--> What asserts can we make about the global invariants?


///////////////////////////////////

Assertions/specifications in Java

--> remember that other programmers/users can only
    see the documentation, not the code

--> want to list preconditions/postconditions in the
    documentation

--> can test for any violations using assert statements


compile as usual

java -ea (file)

public static int divide(int a, int b)
    - preconditions?
        list that b can't be 0
    - postconditions?
        I promise to return a/b (as integer division)



public static void swap(int[] arr, int pos1, int pos2)
    - preconditions?
        pos1 and pos2 are valid positions

    - postconditions?
        arr[pos1] = arr[pos2]
        arr[pos2] = arr[pos1]
        everything else didn't change


See documentation, run javadoc.

//////////////////////////////////

Termination

Partial Correctness:
    - if the function/procedure’s pre-condition holds,
    - and if it terminates,
    - then its post-condition is guaranteed

Total Correctness:
    - if the function/procedure’s pre-condition holds,
    - then it terminates,
    - and its post-condition is guaranteed


We need to show termination to achieve total correctness


////////////////////////

Proving termination.

We want to show:
    - The decreasing amount of work left to do
    - An indication of when the work is done

Use an integer to show the (decreasing) amount of work left
    - Each loop iteration decreases the integer
    - 0 means we are done (no more work)
    - If the integer is 0 (or less), then the loop should exit

//////////////////////////

Recall mult (slightly modified).

Will it necessarily terminate?



- Add measure tracking how much work is left
- Compute measure before and after loop body
- Prove that the measure decreases with each iteration
    (add an assert)
- Prove that if the measure is 0 or less, then the loop exits
    (might need to strengthen to invariant)


Note that proving termination isn't always possible...

See Collatz problem.

Halting problem.