import org.sireum.logika._

val a: Z = readInt()
val b: Z = readInt()
val c: Z = readInt()
var max: Z = 0


if (a >= b) {
    if (a >= c) {
        max = a

        l"""{
            //FILL IN
            1. a >= b               premise
            2. a >= c               premise
            3. max == a             premise
            4. max >= a             algebra 3
            5. max >= b             algebra 1 3
            6. max >= c             algebra 2 3
        }"""
    } else {
        max = c

        l"""{
            //FILL IN
            1. !(a >= c)            premise
            2. a >= b               premise
            3. max == c             premise
            4. a < c                algebra 1
            5. max >= a             algebra 3 4
            6. max >= b             algebra 2 4 3
            7. max >= c             algebra 3
        }"""
    }
    l"""{
        //FILL IN
        1. max >= a                 premise
        2. max >= b                 premise
        3. max >= c                 premise
        4. max == a V max == c      premise
        5. max >= a ^ max >= b      ^i 1 2
        6. max >= a ^ max >= b ^ max >= c   ^i 5 3
    }"""
} else {
    if (b >= c) {
        max = b

        l"""{
            1. !(a >= b)                        premise
            2. b >= c                           premise
            3. max == b                         premise
            4. max >= a                         algebra 3 1
            5. max >= b                         algebra 3
            6. max >= c                         algebra 3 2
            7. max >= a ^ max >= b              ^i 4 5
            8. max >= a ^ max >= b ^ max >= c   ^i 7 6
        }"""
    } else {
        max = c

        l"""{
            1. !(a >= b)                        premise
            2. !(b >= c)                        premise
            3. max == c                         premise
            4. max >= a                         algebra 3 1 2
            5. max >= b                         algebra 3 2
            6. max >= c                         algebra 3
            7. max >= a ^ max >= b              ^i 4 5
            8. max >= a ^ max >= b ^ max >= c   ^i 7 6
        }"""
    }
    l"""{
        //FILL IN
        1. max >= a ^ max >= b ^ max >= c       premise
        2. max == b V max == c                  premise
    }"""
}

l"""{
    //FILL IN
    1. max >= a ^ max >= b ^ max >= c           premise
    2. (max == a V max == c) V (max == b V max == c)    premise
    //build the or assert using nested Velimination

    3. {
        4. max == a V max == c                  assume
        5. {
            6. max == a                         assume
            7. max == a V max == b              Vi1 6
            8. max == a V max == b V max == c   Vi1 7
        }
        9. {
            10. max == c                        assume
            11. max == a V max == b V max == c  Vi2 10
        }
        12. max == a V max == b V max == c      Ve 4 5 9
    }
    13. {
        14. max == b V max == c                 assume
        15. {
            16. max == b                        assume
            17. max == a V max == b             Vi2 16
            18. max == a V max == b V max == c  Vi1 17
        }
        19. {
            20. max == c                        assume
            21. max == a V max == b V max == c  Vi2 20
        }
        22. max == a V max == b V max == c      Ve 14 15 19
    }
    23. max == a V max == b V max == c          Ve 2 3 13
}"""

print("Max between ", a, ", ", b, " and ", c, " is ", max)
assert(max >= a & max >= b & max >= c)
assert(max == a | max == b | max == c)