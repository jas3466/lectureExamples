Exam 2.

Avg. 78% (62/80)
High. 100% (80/80)

A (72-80): 36 students!!! (awesome!)
B (64-71): 14 students
C (56-63): 11 students
D (48-55): 13 students
F (below 48): 16 students


HW 9 due Thursday, October 28.
- note the detail on Discord about problem 6


///////////////////////////////////////

Reminder: assume statements

When do we use them?
    - user input that needs to be in a particular range
    - after you get user input, put:

    assume(the range of that input)

What do they mean?
    you need to make an assumption that the user entered what
    you wanted in order to reason about correctness

What can we do in the next logic block?

put (the range of that input) as a premise

//////////////////////////////////////

Reminder: assert statements

- will check to see if our program is logically correct

When do we use them?

- after your program has done some work, and you want to be
able to claim what the result is

What do they mean?
How do we get an assert statement to be verified?

must process all code/variable updates in logic blocks

last logic block before assert must have exactly the claim
of the assert

//////////////////////////////////////

Reminder: subst rules

l"""{
    1. x == y + 1                       (some justification)
    2. (x > 0) ^ (y + 1 < 10)           (some justification)
    3. ((y+1)) > 0) ^ (y + 1 < 10)      subst1 1 2
    4. (x > 0) ^ (x < 10)           subst2 1 2
}"""

//////////////////////////////////////

Reminder: algebra rule

l"""{
    1. x > 0                            (some justification)
    2. x >= 0                           algebra 1
    3. y == x + 1                       (some justification)
    4. y > 0                            algebra 1 3
}"""


//////////////////////////////////////

Example: see assign1.logika

First, fill in assert statements
Then, fill in logic blocks

//////////////////////////////////////

INVARIANT - something that remains true through the program

We will use these much more when we get to loops

Example: assign2.logika


/////////////////////////////////////

Processing programs with /

All / is integer division (no decimal type)

For every line of code with num / denom:
    - must have EXACTLY this claim in the previous logic block:
        denom != 0

    - Other forms will not work
        0 != denom (NO!)
        denom > 0   (NO!)


This is even true when dividing by a literal (like 2):

l"""{
    1. 2 != 0           algebra
}"""

x = a / 2


/////////////////////////////

Processing programs with %

For every line of code with num % denom
    - must have EXACTLY these claims in the previous logic block:
        denom > 0
        num >= 0

l"""{
    1. 2 > 0           algebra
    2. a >= 0          (some justification)
}"""

x = a % 2

/////////////////////////////////////

Logika is aware that all division is integer division.


This will not validate!!!

l"""{
    1. x == (x/3) * 3           algebra
}"""

x = 4 (wouldn't be true)

/////////////////////////////////////

Example (assign3.logika): write a program that:

- gets a positive input number (and also saves it to an orig val)
- multiplies the input number by 2
        - (the number should be even now)

- adds 2 to my running total
        - (the number should still be even)

- divide the result by 2 and subtract 1
        - (the number should be back to the original)

Example: suppose input is 3

//////////////////////////////////

(WILL DO THIS ON THURSDAY)

Example (assign4.logika): swap program

inputs x and y (save their original values)

x = x + y
y = x - y
x = x - y

now x and y will have switched

Example: x is 10 and y is 3

x = 13
y = 10
x = 3

/////////////////////////////////

Look at HW problems.