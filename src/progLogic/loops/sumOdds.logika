import org.sireum.logika._

//returns the sum of the first n odd numbers
//sumOdds(0) = 0
//sumOdds(1) = 1
//sumOdds(2) = 1 + 3 = 4
//sumOdds(3) = 1 + 3 + 5 = 9
//sumOdds(4) = 1 + 3 + 5 + 7 = 16
//do you see a pattern?
def sumOdds(n: Z): Z = {
    l"""{
        requires n >= 0
        ensures result == n*n
    }"""

    var sum: Z = 0
    var count: Z = 0
    var odd: Z = 1

    //show both invariants are true before the loop begins
    l"""{
        1. sum == 0             premise
        2. count == 0           premise
        3. odd == 1             premise
        4. sum == count*count   algebra 1 2
        5. odd == 2*count + 1   algebra 2 3
    }"""

    while (count != n) {
        l"""{
            invariant sum == count*count
                odd == 2*count + 1
            modifies sum, count, odd
        }"""

        //could list exactly each variant as premises

        count = count + 1
        l"""{
            1. count == count_old + 1       premise
            2. sum == count_old*count_old   premise
            3. odd == 2*count_old + 1       premise
            4. sum == (count-1)*(count-1)   algebra 1 2
            5. odd == 2*(count-1)+ 1        algebra 1 3
        }"""

        sum = sum + odd
        l"""{
            1. sum == sum_old + odd                 premise
            2. sum_old == (count-1)*(count-1)       premise
            3. odd == 2*(count-1)+ 1                premise
            4. sum - odd == (count-1)*(count-1)     algebra 1 2
        }"""

        odd = odd + 2
        l"""{
            1. odd == odd_old + 2                   premise
            2. odd_old == 2*(count-1)+ 1            premise
            3. sum - odd_old == (count-1)*(count-1)     premise
            4. odd == 2*(count-1)+ 1 + 2            algebra 1 2
            5. odd == 2*count + 1                   algebra 4
            6. sum - (2*(count-1)+ 1) == (count-1)*(count-1)  algebra 2 3
            7. sum == count*count                   algebra 6
        }"""
    }

    //need to show the postcondition
    l"""{
        1. sum == count*count                   premise
        2. odd == 2*count + 1                   premise
        3. !(count != n)                        premise
        4. count == n                           algebra 3
        5. sum == n*n                           algebra 1 4
    }"""

    return sum
}

/////////// Test code ////////////////

var num: Z = 3

//we must show the precondition is true
l"""{
    1. num == 3                 premise
    2. num >= 0                 algebra 1
}"""

var test: Z = sumOdds(num)
//can use the postcondition as a premise here
l"""{
    1. test == num*num          premise
    2. num == 3                 premise
    3. test = 9                 algebra 1 2
}"""

//what do we want to assert?
assert(test == 9)
